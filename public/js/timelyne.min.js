var timelyne = function(options) {
    "use strict";
    function initilizePhases() {
        var tlElementDev = document.getElementById(tlPhaseDev), tlElementReview = document.getElementById(tlPhaseReview), tlElementTest = document.getElementById(tlPhaseTest);
        tlElementDev.style.width = 100 * (tlLengthDev / tlDiff) + "%", tlElementDev.style.backgroundColor = tlHexDev, 
        tlElementReview.style.width = 100 * (tlLengthReview / tlDiff) + "%", tlElementReview.style.backgroundColor = tlHexReview, 
        tlElementTest.style.width = 100 * (tlLengthTest / tlDiff) + "%", tlElementTest.style.backgroundColor = tlHexTest;
    }
    var that = this;
    this._lines = [], this._fps = 16.667, this._second = 1e3, this._minute = 60 * second, 
    this._hour = 60 * minute, this._day = 24 * hour, tlStart = options.start, tlEnd = options.end, 
    tlDiff = tlEnd - tlStart, tlProgressBar = document.getElementById("tl-test-01").children[1], 
    tlProgressFull = tlProgressBar.children[0], tlProgressLabel = tlProgressFull.children[0], 
    tlPhaseDev = "tl-phase-dev", tlPhaseReview = "tl-phase-review", tlPhaseTest = "tl-phase-test", 
    tlThreshholdDev = tlLengthDev / tlDiff, tlThreshholdReview = tlThreshholdDev + tlLengthReview / tlDiff, 
    tlThreshholdTest = tlThreshholdDev + tlThreshholdReview + tlLengthTest / tlDiff, 
    this._test = {
        color: options.test.color || "#E7322E",
        length: options.test.length || 3 * this._day
    }, this._review = {
        color: options.review.color || "#B0B000",
        length: options.review.length || 1 * this._day
    }, this._development = {
        color: options.development.color || "#178DE3",
        length: options.development.length || 0
    }, this.buildLines = function(lines) {
        function saveLines(element) {
            that._lines.push(element);
        }
        lines.forEach(saveLines);
    }, this.findPhase = function(something) {
        return tlThreshholdDev > something ? tlHexDev : tlThreshholdReview > something ? tlHexReview : tlThreshholdTest > something ? tlHexTest : void 0;
    }, this.formatDate = function(remaining) {
        var remDays, remHours, remMins, remSecs;
        return remDays = Math.floor(remaining / day), remaining -= remDays * day, remHours = Math.floor(remaining / hour), 
        remaining -= remHours * hour, remMins = Math.floor(remaining / minute), remaining -= remMins * minute, 
        remSecs = Math.floor(remaining / second), remaining -= remSecs * second, leadingZero(remDays) + ":" + leadingZero(remHours) + ":" + leadingZero(remMins) + ":" + leadingZero(remSecs);
    }, this.addLeadingZero = function(num) {
        return 10 > num ? "0" + num : num;
    }, initilizePhases(), this.buildLines(options.data), setInterval(this.update, this._fps);
};

timelyne.prototype.update = function() {
    "use strict";
    var updateNow = Date.now(), updateLeft = tlEnd - updateNow, updatePast = updateNow - tlStart;
    tlProgressLabel.innerHTML = dateFormatter(updateLeft) + " <span class='tl-progress-fin'></span>", 
    tlProgressLabel.style.backgroundColor = calculatePhase(updatePast / tlDiff), tlProgressLabel.children[0].style.borderTopColor = calculatePhase(updatePast / tlDiff), 
    tlProgressFull.style.width = 100 * (updatePast / tlDiff) + "%";
};

var opts = {
    defaults: {
        development: {
            color: "#178DE3"
        },
        review: {
            color: "#B0B000",
            length: "1 day"
        },
        test: {
            color: "#E7322E",
            length: "3 day"
        }
    },
    data: [ {
        title: "Milestone 1",
        start: "Sep 01, 2013 08:00",
        end: "Sep 29, 2013 18:00"
    }, {
        title: "Milestone 2",
        start: "Sep 08, 2013 08:00",
        end: "Sep 29, 2013 18:00"
    }, {
        title: "Milestone 3",
        start: "Sep 16, 2013 08:00",
        end: "Sep 29, 2013 18:00"
    } ]
};

window.timelyne = window.timelyne || timelyne(opts);